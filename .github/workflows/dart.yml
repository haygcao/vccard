name: Generate Dart Phone Location Maps

on:
  schedule:
    - cron: '0 12 15 * *' # Runs every month on the 15th at 12:00 PM UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  convert-data:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          ref: dartnumber
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pypinyin
          
      - name: Download and Process SQL data
        run: |
          cat > process_data.py << 'EOF'
          import re
          import requests
          from pypinyin import lazy_pinyin, Style
          
          def download_sql_file():
              url = "https://github.com/dannyhu926/phone_location/raw/refs/heads/master/mysql/phone_location.sql"
              response = requests.get(url)
              response.raise_for_status()
              return response.text
          
          def convert_to_pinyin(province, city):
              p = ''.join(lazy_pinyin(province, style=Style.NORMAL))
              c = ''.join(lazy_pinyin(city, style=Style.NORMAL))
              # 首字母大写
              p = p.title()
              c = c.title()
              return f"{c}, {p}"
          
          def process_sql_data(sql_content):
              # 提取 INSERT 语句
              pattern = r"INSERT INTO `phone_location` VALUES\s*\((.*?)\);"
              matches = re.findall(pattern, sql_content, re.DOTALL)
              
              zh_map = {}
              en_map = {}
              
              for match in matches:
                  # 分割字段值
                  values = [v.strip().strip("'") for v in match.split(',')]
                  if len(values) >= 5:  # 确保有足够的字段
                      pref = values[1].strip()  # pref 字段
                      phone = values[2].strip() # phone 字段
                      province = values[3].strip()  # province 字段
                      city = values[4].strip()  # city 字段
                      
                      # 只处理有效的数据
                      if pref and phone and province and city:
                          # 使用 pref 作为 key
                          phone_key = int("86" + pref)
                          
                          # 生成中文地址（省市之间没有逗号）
                          zh_map[phone_key] = f"{province}{city}"
                          
                          # 生成拼音地址（城市和省份之间有逗号）
                          en_map[phone_key] = convert_to_pinyin(province, city)
              
              print(f"Processed {len(zh_map)} records")
              return zh_map, en_map
          
          def generate_dart_files(zh_map, en_map):
              import os
              os.makedirs('lib', exist_ok=True)
              
              # 生成中文版本
              with open('lib/phone_location_zh.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_zh() {\n  return {\n')
                  for phone, location in zh_map.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')
              
              # 生成拼音版本
              with open('lib/phone_location_en.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_en() {\n  return {\n')
                  for phone, location in en_map.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')
          
          if __name__ == '__main__':
              try:
                  print("Downloading SQL file...")
                  sql_content = download_sql_file()
                  
                  print("Processing SQL data...")
                  zh_map, en_map = process_sql_data(sql_content)
                  
                  print("Generating Dart files...")
                  generate_dart_files(zh_map, en_map)
                  
                  print("Processing completed successfully!")
              except Exception as e:
                  print(f"Error occurred: {str(e)}")
                  raise
          EOF
          
          python process_data.py
          
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add lib/phone_location_*.dart
          git commit -m "Update Dart phone location maps"
          git push origin dartnumber
