name: US FCC database Daily Data Processing

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  process_data:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: us
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pandas and phonenumbers
        run: pip install pandas phonenumbers

      - name: Download and Process Data
        run: |
          mkdir -p original
          wget --content-disposition -O original/data.csv https://fccprod.servicenowservices.com/api/x_g_fmc_rmd/rmd/csv_download

          python <<EOF
          import pandas as pd
          import re
          import phonenumbers

          df = pd.read_csv('original/data.csv')
          df = df[['business_name', 'contact_telephone_number']]
          df = df.rename(columns={'business_name': 'name', 'contact_telephone_number': 'phoneNumber'})

          df['phoneNumber'] = df['phoneNumber'].astype(str).apply(lambda x: re.sub(r"^'+", "", x))
          df['phoneNumber'] = df['phoneNumber'].str.replace('.', '', regex=False)
          df['phoneNumber'] = df['phoneNumber'].str.strip()
          df['name'] = df['name'].str.replace(r'[",.]', '', regex=True)
          df['name'] = df['name'].str.replace(r'[\",.]', '', regex=True)
          df['name'] = df['name'].str.replace(r'[/]', '', regex=True)
          #df['name'] = df['name'].str.strip()

          def format_phone_number(number):
              try:
                  if number.startswith("+"):
                      parsed_number = phonenumbers.parse(number, None)
                      if phonenumbers.is_valid_number(parsed_number):
                          return phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164)
                  else:
                      parsed_number = phonenumbers.parse(number, "US")
                      if phonenumbers.is_valid_number(parsed_number):
                          return phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.NATIONAL)
              except phonenumbers.phonenumberutil.NumberParseException:
                  pass
              return number

          df['phoneNumber'] = df['phoneNumber'].apply(format_phone_number)

          df = df[df['phoneNumber'].notna() & (df['phoneNumber'] != '')]  # Filter after formatting

          # 生成新格式数据
          df['id'] = ''
          df['priority'] = 3
          df['action'] = 'block'
          df['labelId'] = 'telemarketing'
          df['isEnabled'] = True
          df['isSubscribed'] = 1
          df['count'] = ''
          df['avatar'] = ''
          df['url'] = ''

          df = df[['id', 'name', 'priority', 'action', 'phoneNumber', 'labelId', 'isEnabled', 'isSubscribed', 'count', 'avatar', 'url']]
          df.to_csv('processed_v2.csv', index=False)
          
          # 保留原始格式
          df['label'] = 'Telemarketing'
          df['avatar'] = ''
          df['isSubscribed'] = True
          df['count'] = ''
          df['url'] = ''
          df_legacy = df[['phoneNumber', 'label', 'name', 'avatar', 'isSubscribed', 'count', 'url']]
          df_legacy.to_csv('processed_data.csv', index=False)
          EOF

      - name: Configure Git User
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Commit and Force Push to 'us' branch
        run: |
          # 检查文件是否存在
          if [ ! -f original/data.csv ] || [ ! -f processed_data.csv ] || [ ! -f processed_v2.csv ]; then
            echo "一个或多个数据文件未生成，跳过 us 分支操作。"
            exit 1 # 或者 exit 0 如果你希望工作流继续
          fi

          # 创建/重置 'us' 分支基于当前 main 分支的 HEAD，并切换过去
          git checkout -B us
          
          # 添加文件 (这些文件由 Python 脚本在工作区根目录生成)
          git add original/data.csv processed_data.csv processed_v2.csv
          
          # 提交。如果没有任何更改，`git commit` 会失败，但我们依然要强制推送。
          # 使用 `|| true` 来忽略 commit 可能的失败 (例如 "nothing to commit")
          git commit -m "Update processed FCC data (us branch)" || true
          
          # 强制推送到 'us' 分支
          echo "Force pushing to us branch..."
          git push origin us --force
          
          # 切换回 main 分支为下一步做准备
          git checkout main

      - name: Prepare for main branch commit
        run: |
          if [ ! -f processed_v2.csv ]; then
            echo "processed_v2.csv 未找到，跳过 main 分支操作。"
            exit 1 # 或者 exit 0
          fi
          mkdir -p US
          mv processed_v2.csv US/processed_v2.csv

      - name: Commit and Force Push to 'main' branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update main branch FCC data (US/processed_v2.csv)"
          file_pattern: "US/processed_v2.csv"
          branch: main
          # `force: true` 会尝试提交，即使文件内容未变 (allow-empty)
          # `push_options: '--force'` 实现强制推送
          force: true
          push_options: '--force'
 

