name: 二次拆分split Convert SQL to CSV Generate reduced Dart Phone Location Maps

on:
  workflow_dispatch:
  schedule:
     - cron: '0 12 1 * *'
  
permissions:
  contents: write

jobs:
  convert-sql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: dartnumber

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pandas and requests
        run: |
          python -m pip install --upgrade pip
          pip install requests pypinyin pandas

      - name: Download SQL and Convert to CSV
        run: |
          cat > convert_sql_to_csv.py << 'EOF'
          import requests
          import pandas as pd
          import csv
          import os 

          def download_sql():
              url = "https://github.com/dannyhu926/phone_location/raw/refs/heads/master/mysql/phone_location.sql"
              response = requests.get(url)
              response.raise_for_status()
              return response.text

          def convert_to_csv(sql_content, csv_filepath):
              insert_statements = [line for line in sql_content.splitlines() if line.startswith("INSERT INTO `phone_location`")]
              data = []
              for statement in insert_statements:
                  values_str = statement[statement.find("VALUES") + len("VALUES"):].strip()
                  values = []
                  in_quote = False
                  current_value = ""
                  for char in values_str:
                      if char == "'":
                          in_quote = not in_quote
                      elif char == "," and not in_quote:
                          values.append(current_value.strip("'"))
                          current_value = ""
                      elif in_quote:
                          current_value += char
                  values.append(current_value.strip("'"))
                  data.append(values[1:5])

              df = pd.DataFrame(data, columns=['pref', 'phone', 'province', 'city'])
              df.to_csv(csv_filepath, index=False, quoting=csv.QUOTE_NONNUMERIC)

          if __name__ == "__main__":
              sql_content = download_sql()
              #convert_to_csv(sql_content, 'phone_location.csv')
              # Create lib/cn directory if it doesn't exist
              os.makedirs('lib/cn', exist_ok=True)
              convert_to_csv(sql_content, 'lib/cn/phone_location.csv')
              
          EOF
          python convert_sql_to_csv.py

      - name: Commit and Push CSV
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update phone_location"
          file_pattern: "lib/cn/phone_location.csv"
          branch: dartnumber
          repository: .
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}

      - name: Stage 2 Preprocess CSV
        run: |
          cat > preprocess_csv.py << 'EOF'
          import pandas as pd
          import csv

          df = pd.read_csv('lib/cn/phone_location.csv')
          df = df.drop(columns=['pref'])
          df['phone'] = '86' + df['phone'].astype(str).str.replace("'", "")
          df['province'] = df['province'].str.replace("'", "")
          df['city'] = df['city'].str.replace("'", "")
          df.to_csv('phone_location_processed.csv', index=False, quoting=csv.QUOTE_NONNUMERIC)
          EOF
          python preprocess_csv.py

      - name: Stage 3 Generate Dart files
        run: |
          cat > generate_dart.py << 'EOF'
          import csv
          from pypinyin import lazy_pinyin, Style
          import os

          def convert_to_pinyin(province, city):
              p = ''.join(lazy_pinyin(province, style=Style.NORMAL))
              c = ''.join(lazy_pinyin(city, style=Style.NORMAL))
              return f"{c.title()}, {p.title()}"

          def process_csv_data(csv_filepath):
              zh_map = {}
              en_map = {}
              with open(csv_filepath, 'r', encoding='utf-8') as csvfile:
                  reader = csv.DictReader(csvfile)
                  for row in reader:
                      phone = row.get('phone')
                      province = row.get('province')
                      city = row.get('city')

                      if phone and province and city:
                          try:
                              phone_key = int(phone)
                          except ValueError as e:
                              print(f"Skipping record due to invalid phone: {phone}, error: {e}")
                              continue

                          zh_map[phone_key] = f"{province}{city}"
                          en_map[phone_key] = convert_to_pinyin(province, city)

              return zh_map, en_map

          def generate_dart_files(zh_map, en_map):
              os.makedirs('lib', exist_ok=True)

              with open('lib/cn/phone_location_zh.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_zh() {\n  return {\n')
                  for phone, location in zh_map.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

              with open('lib/cn/phone_location_en.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_en() {\n  return {\n')
                  for phone, location in en_map.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

          if __name__ == "__main__":
              zh_map, en_map = process_csv_data('phone_location_processed.csv')
              generate_dart_files(zh_map, en_map)
          EOF
          python generate_dart.py



      - name: Stage 4 Optimize Phone Ranges
        run: |
          cat > optimize_ranges.py << 'EOF'
          import pandas as pd
          from collections import defaultdict
          from pypinyin import lazy_pinyin, Style

          def convert_to_pinyin(province, city):
              p = ''.join(lazy_pinyin(province, style=Style.NORMAL))
              c = ''.join(lazy_pinyin(city, style=Style.NORMAL))
              return f"{c.title()}, {p.title()}"

          def process_csv(input_file):
              df = pd.read_csv(input_file)
              processed = set()
              result = []

              location_groups = defaultdict(list)
              for _, row in df.iterrows():
                  phone = str(row['phone'])
                  location_groups[f"{row['province']}{row['city']}"].append({
                      'phone': phone,
                      'province': row['province'],
                      'city': row['city']
                  })

              for location, numbers in location_groups.items():
                  prefix_groups = defaultdict(list)
                  for num in numbers:
                      if num['phone'] not in processed:
                          prefix = num['phone'][:-1]
                          prefix_groups[prefix].append(num)

                  for prefix, group in prefix_groups.items():
                      if len(group) == 10:
                          sorted_group = sorted(group, key=lambda x: x['phone'])
                          if all(int(n['phone'][-1]) == i for i, n in enumerate(sorted_group)):
                              first = sorted_group[0]
                              if all(n['province'] == first['province'] and n['city'] == first['city'] for n in sorted_group):
                                  result.append({
                                      'phone': int(prefix),
                                      'province': first['province'],
                                      'city': first['city']
                                  })
                                  processed.update(n['phone'] for n in sorted_group)

              for _, row in df.iterrows():
                  phone = str(row['phone'])
                  if phone not in processed:
                      result.append({
                          'phone': int(phone),
                          'province': row['province'],
                          'city': row['city']
                      })
              return result

          def optimize_phone_ranges(input_file):
              first_round = process_csv(input_file)
              temp_df = pd.DataFrame(first_round)
              temp_csv = 'temp_processed.csv'
              temp_df.to_csv(temp_csv, index=False)
              second_round = process_csv(temp_csv)
              
              # Convert to DataFrame to maintain order
              final_df = pd.DataFrame(second_round)
              optimized_zh = {}
              optimized_en = {}

              # Use DataFrame iteration to maintain order
              for _, row in final_df.iterrows():
                  phone = row['phone']
                  optimized_zh[phone] = f"{row['province']}{row['city']}"
                  optimized_en[phone] = convert_to_pinyin(row['province'], row['city'])
              return optimized_zh, optimized_en

          def generate_optimized_dart_files(optimized_zh, optimized_en):
              with open('lib/cn/phone_location_zh_optimized.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions - Optimized Version\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_zh_optimized() {\n  return {\n')
                  for phone, location in optimized_zh.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

              with open('lib/cn/phone_location_en_optimized.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions - Optimized Version\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_en_optimized() {\n  return {\n')
                  for phone, location in optimized_en.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

          if __name__ == "__main__":
              optimized_zh, optimized_en = optimize_phone_ranges('phone_location_processed.csv')
              generate_optimized_dart_files(optimized_zh, optimized_en)
          EOF
          python optimize_ranges.py


      - name: Stage 5 Process Individual Mobile Prefixes
        run: |
          cat > process_mobile_prefixes.py << 'EOF'
          import pandas as pd
          from pypinyin import lazy_pinyin, Style

          def convert_to_pinyin(province, city):
              p = ''.join(lazy_pinyin(province, style=Style.NORMAL))
              c = ''.join(lazy_pinyin(city, style=Style.NORMAL))
              return f"{c.title()}, {p.title()}"

          def process_mobile_prefix(df, prefix_ranges):
              prefix_zh = {}
              prefix_en = {}

              for _, row in df.iterrows():
                  phone = str(row['phone'])
                  for prefix_range in prefix_ranges:
                      if '-' in prefix_range:
                          start, end = prefix_range.split('-')
                          for i in range(int(start), int(end) + 1):
                              if phone.startswith(str(i)):
                                  phone_int = int(phone)
                                  prefix_zh[phone_int] = f"{row['province']}{row['city']}"
                                  prefix_en[phone_int] = convert_to_pinyin(row['province'], row['city'])
                                  break  # 找到匹配的范围后跳出内层循环
                      else:
                          if phone.startswith(prefix_range):
                              phone_int = int(phone)
                              prefix_zh[phone_int] = f"{row['province']}{row['city']}"
                              prefix_en[phone_int] = convert_to_pinyin(row['province'], row['city'])

              return prefix_zh, prefix_en

          def generate_mobile_dart_files(prefix_range_str, data_zh, data_en):
              # 替换'-'为'_'以符合文件名规范
              prefix_str = prefix_range_str.replace('-', '_')

              # Generate ZH file
              with open(f'lib/cn/phone_location_zh_{prefix_str}.dart', 'w', encoding='utf-8') as f:
                  f.write(f'// Generated by GitHub Actions - {prefix_str} Numbers Only\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write(f'Map<int, String> get{prefix_str}_zh() {{\n  return {{\n')
                  for phone, location in data_zh.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

              # Generate EN file
              with open(f'lib/cn/phone_location_en_{prefix_str}.dart', 'w', encoding='utf-8') as f:
                  f.write(f'// Generated by GitHub Actions - {prefix_str} Numbers Only\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write(f'Map<int, String> get{prefix_str}_en() {{\n  return {{\n')
                  for phone, location in data_en.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

          def main():
              # Read the processed CSV file
              df = pd.read_csv('phone_location_processed.csv')

              # Process each mobile prefix range
              prefix_ranges = [
                  '86130-86134',
                  '86135-86139',
                  '8614',                  
                  '86150-86153',
                  '86155-86159',
                  '86170-86174',
                  '86175-86178',
                  '86180-86184',
                  '86185-86189',
                  '8619'
              ]

              # 将所有范围合并成一个字典
              all_prefix_zh = {}
              all_prefix_en = {}

              for prefix_range in prefix_ranges:
                  prefix_zh, prefix_en = process_mobile_prefix(df, [prefix_range])
                  all_prefix_zh.update(prefix_zh)
                  all_prefix_en.update(prefix_en)
                  generate_mobile_dart_files(prefix_range, prefix_zh, prefix_en)

          if __name__ == "__main__":
              main()
          EOF
          python process_mobile_prefixes.py

      - name: Commit and Push dart
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update Dart phone location maps with optimized version and mobile prefixes"
          file_pattern: "lib/cn/phone_location_*.dart"
          branch: dartnumber
          repository: .
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}
