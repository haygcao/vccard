name: Convert SQL to CSV Generate reduced Dart Phone Location Maps

on:
  workflow_dispatch:
  schedule:
     - cron: '0 12 1 * *'
  
permissions:
  contents: write

jobs:
  convert-sql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: dartnumber

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pandas and requests
        run: |
          python -m pip install --upgrade pip
          pip install requests pypinyin pandas

      - name: Download SQL and Convert to CSV
        run: |
          cat > convert_sql_to_csv.py << 'EOF'
          import requests
          import pandas as pd
          import csv

          def download_sql():
              url = "https://github.com/dannyhu926/phone_location/raw/refs/heads/master/mysql/phone_location.sql"
              response = requests.get(url)
              response.raise_for_status()
              return response.text

          def convert_to_csv(sql_content, csv_filepath):
              insert_statements = [line for line in sql_content.splitlines() if line.startswith("INSERT INTO `phone_location`")]
              data = []
              for statement in insert_statements:
                  values_str = statement[statement.find("VALUES") + len("VALUES"):].strip()
                  values = []
                  in_quote = False
                  current_value = ""
                  for char in values_str:
                      if char == "'":
                          in_quote = not in_quote
                      elif char == "," and not in_quote:
                          values.append(current_value.strip("'"))
                          current_value = ""
                      elif in_quote:
                          current_value += char
                  values.append(current_value.strip("'"))
                  data.append(values[1:5])

              df = pd.DataFrame(data, columns=['pref', 'phone', 'province', 'city'])
              df.to_csv(csv_filepath, index=False, quoting=csv.QUOTE_NONNUMERIC)

          if __name__ == "__main__":
              sql_content = download_sql()
              convert_to_csv(sql_content, 'phone_location.csv')
          EOF
          python convert_sql_to_csv.py

      - name: Commit and Push CSV
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update phone_location"
          file_pattern: "phone_location.csv"
          branch: dartnumber
          repository: .
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}

      - name: Stage 2 Preprocess CSV
        run: |
          cat > preprocess_csv.py << 'EOF'
          import pandas as pd
          import csv

          df = pd.read_csv('phone_location.csv')
          df = df.drop(columns=['pref'])
          df['phone'] = '86' + df['phone'].astype(str).str.replace("'", "")
          df['province'] = df['province'].str.replace("'", "")
          df['city'] = df['city'].str.replace("'", "")
          df.to_csv('phone_location_processed.csv', index=False, quoting=csv.QUOTE_NONNUMERIC)
          EOF
          python preprocess_csv.py

      - name: Stage 3 Generate Dart files
        run: |
          cat > generate_dart.py << 'EOF'
          import csv
          from pypinyin import lazy_pinyin, Style
          import os

          def convert_to_pinyin(province, city):
              p = ''.join(lazy_pinyin(province, style=Style.NORMAL))
              c = ''.join(lazy_pinyin(city, style=Style.NORMAL))
              return f"{c.title()}, {p.title()}"

          def process_csv_data(csv_filepath):
              zh_map = {}
              en_map = {}
              with open(csv_filepath, 'r', encoding='utf-8') as csvfile:
                  reader = csv.DictReader(csvfile)
                  for row in reader:
                      phone = row.get('phone')
                      province = row.get('province')
                      city = row.get('city')

                      if phone and province and city:
                          try:
                              phone_key = int(phone)
                          except ValueError as e:
                              print(f"Skipping record due to invalid phone: {phone}, error: {e}")
                              continue

                          zh_map[phone_key] = f"{province}{city}"
                          en_map[phone_key] = convert_to_pinyin(province, city)

              return zh_map, en_map

          def generate_dart_files(zh_map, en_map):
              os.makedirs('lib', exist_ok=True)

              with open('lib/phone_location_zh.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_zh() {\n  return {\n')
                  for phone, location in zh_map.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

              with open('lib/phone_location_en.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_en() {\n  return {\n')
                  for phone, location in en_map.items():
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

          if __name__ == "__main__":
              zh_map, en_map = process_csv_data('phone_location_processed.csv')
              generate_dart_files(zh_map, en_map)
          EOF
          python generate_dart.py



      - name: Stage 4 Optimize Phone Ranges
        run: |
          cat > optimize_ranges.py << 'EOF'
          import pandas as pd
          from collections import defaultdict
          from pypinyin import lazy_pinyin, Style

          def convert_to_pinyin(province, city):
              p = ''.join(lazy_pinyin(province, style=Style.NORMAL))
              c = ''.join(lazy_pinyin(city, style=Style.NORMAL))
              return f"{c.title()}, {p.title()}"

          def optimize_phone_ranges(input_file):
              # 读取处理后的CSV文件
              df = pd.read_csv(input_file)
              
              # 将电话号码转换为字符串并按前缀分组
              optimized_zh = {}
              optimized_en = {}
              
              # 创建一个临时字典来存储所有号码
              all_numbers = {}
              for _, row in df.iterrows():
                  phone = str(row['phone'])
                  all_numbers[phone] = {
                      'province': row['province'],
                      'city': row['city']
                  }
              
              # 检查所有可能的前缀长度
              processed_numbers = set()
              for prefix_length in range(8, 6, -1):  # 从长到短检查前缀 7位 8位
                  # 按前缀分组处理数据
                  prefix_groups = defaultdict(list)
                  
                  # 只处理还未被处理的号码
                  remaining_numbers = {k: v for k, v in all_numbers.items() if k not in processed_numbers}
                  
                  for phone, info in remaining_numbers.items():
                      if len(phone) >= prefix_length:
                          prefix = phone[:prefix_length]
                          prefix_groups[prefix].append({
                              'phone': phone,
                              'province': info['province'],
                              'city': info['city']
                          })
                  
                  # 检查每组是否可以优化
                  for prefix, numbers in prefix_groups.items():
                      if len(numbers) == 10:  # 确保有0-9的完整序列
                          # 检查末尾是否是0-9序列
                          phones = sorted(n['phone'] for n in numbers)
                           #优化：检查号码是否连续
                          if all(int(phones[i]) == int(phones[0]) + i for i in range(10)):

                            # 检查所有记录的城市是否相同
                              first_city = numbers[0]['city']
                              first_province = numbers[0]['province']
                              all_same = all(n['city'] == first_city and n['province'] == first_province for n in numbers)

                              if all_same:
                                  # 如果所有记录都指向相同的城市，只保存前缀
                                  prefix_int = int(prefix)
                                  optimized_zh[prefix_int] = f"{first_province}{first_city}"
                                  optimized_en[prefix_int] = convert_to_pinyin(first_province, first_city)
                                  # 标记这些号码已处理
                                  for n in numbers:
                                      processed_numbers.add(n['phone'])
              
              # 处理剩余未优化的号码
              for phone, info in all_numbers.items():
                  if phone not in processed_numbers:
                      optimized_zh[int(phone)] = f"{info['province']}{info['city']}"
                      optimized_en[int(phone)] = convert_to_pinyin(info['province'], info['city'])
              
              return optimized_zh, optimized_en

          def generate_optimized_dart_files(optimized_zh, optimized_en):
              # 生成优化后的中文版本
              with open('lib/phone_location_zh_optimized.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions - Optimized Version\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_zh_optimized() {\n  return {\n')
                  for phone, location in sorted(optimized_zh.items()):
                      f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

              # 生成优化后的拼音版本
              with open('lib/phone_location_en_optimized.dart', 'w', encoding='utf-8') as f:
                  f.write('// Generated by GitHub Actions - Optimized Version\n')
                  f.write('// Source: https://github.com/dannyhu926/phone_location\n\n')
                  f.write('Map<int, String> get86_en_optimized() {\n  return {\n')
                  for phone, location in sorted(optimized_en.items()):
                       f.write(f'    {phone}: "{location}",\n')
                  f.write('  };\n}\n')

          if __name__ == "__main__":
              optimized_zh, optimized_en = optimize_phone_ranges('phone_location_processed.csv')
              generate_optimized_dart_files(optimized_zh, optimized_en)
          EOF          
          python optimize_ranges.py

      - name: Commit and Push dart
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update Dart phone location maps with optimized version"
          file_pattern: "lib/phone_location_*.dart"
          branch: dartnumber
          repository: .
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}
