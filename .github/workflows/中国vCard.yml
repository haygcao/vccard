name: China VC CARD

on:
  schedule:
    - cron: '0 0 */30 * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install PyYAML and requests
        run: pip install pyyaml requests

      - name: Generate CSV
        run: |
          python <<EOF
          import yaml
          import requests
          import os
          import json
          import re
          import csv

          base_url = "https://api.github.com/repos/metowolf/vCards/contents/data"
          headers = {"Accept": "application/vnd.github+json"}

          response = requests.get(base_url, headers=headers)
          folders = json.loads(response.text)

          for folder in folders:
            if folder["type"] == "dir":
              label = folder["name"]
              os.makedirs('原始/cn', exist_ok=True)
              csv_filename = f'原始/cn/{label}.csv'
              with open(csv_filename, 'w', encoding='utf-8', newline='') as f:
                writer = csv.writer(f, quoting=csv.QUOTE_ALL)
                writer.writerow(['phoneNumber', 'label', 'name', 'avatar', 'isSubscribed', 'count', 'url'])

                folder_url = folder["url"]
                folder_response = requests.get(folder_url, headers=headers)
                files = json.loads(folder_response.text)
                for file in files:
                  if file["name"].endswith(".yaml"):
                    name, ext = os.path.splitext(file["name"])
                    yaml_url = file["download_url"]
                    yaml_response = requests.get(yaml_url)
                    data = yaml.safe_load(yaml_response.text)

                    if 'basic' in data and 'organization' in data['basic'] and 'cellPhone' in data['basic']:
                      organization = data['basic']['organization']
                      avatar = f'https://raw.githubusercontent.com/metowolf/vCards/refs/heads/master/data/{label}/{name}.png'
                      
                      if isinstance(data['basic']['cellPhone'], list):
                        for phone in data['basic']['cellPhone']:
                          cleaned_phone = re.sub(r'[- ]|,[\d]*$', '', str(phone)) # 正确的正则表达式 # 更新清理规则 cleaned_phone = re.sub(r'[- ]', '', str(phone)) # 转换 phone 为字符串
                          writer.writerow([cleaned_phone, label, organization, avatar, '1', '', ''])
                      else:
                        print(f"Warning: cellPhone is not a list in {file['name']}")
                    else:
                      print(f"Warning: Missing required fields in {file['name']}")
          EOF

      - name: Process CSV Data
        run: |
          python <<EOF
          import csv
          import os

          label_mapping = {
              '其他': 'other',
              '外卖订餐': 'takeaway',
              '快递物流': 'delivery',
              '电商购物': 'ecommerce',
              '金融银行': 'bank',
              '互联网': 'internet',
              '出行购票': 'travel_ticketing',
              '应用软件': 'application_software',
              '影音娱乐': 'entertainment',
              '房产中介': 'agent',
              '政府机构': 'government',
              '本地生活': 'local_services',
              '汽车行业': 'automotive_industry',
              '租车代价': 'car_rental',
              '证券保险': 'insurance',
              '通讯服务': 'telecommunication'
          }

          for csv_file in os.listdir('原始/cn'):
              if csv_file.endswith('.csv'):
                  output_dir = 'New/cn'
                  os.makedirs(output_dir, exist_ok=True)

                  with open(os.path.join('原始/cn', csv_file), 'r', encoding='utf-8') as infile,\
                       open(os.path.join(output_dir, csv_file), 'w', encoding='utf-8', newline='') as outfile:

                      reader = csv.DictReader(infile)
                      writer = csv.writer(outfile, quoting=csv.QUOTE_ALL)

                      writer.writerow(['id', 'name', 'priority', 'action', 'phoneNumber',
                                      'labelId', 'isEnabled', 'isSubscribed', 'count', 'avatar'])

                      for row in reader:
                          new_row = [
                              '',
                              row['name'],
                              0,
                              '',
                              row['phoneNumber'],
                              label_mapping.get(row['label'], 'other'),
                              'true',
                              row['isSubscribed'],
                              row['count'],
                              row['avatar']
                          ]
                          writer.writerow(new_row)
          EOF

      - name: Commit Original CSVs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update original CSV files"
          file_pattern: |
            原始/cn/*.csv
          repository: .
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}

      - name: Commit Processed new CSVs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update processed CSV files"
          file_pattern: |
            New/cn/*.csv
          repository: .
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}
          
